=SparseMat=

sparse matrix implementation.

==Data Structure==

typedef std::map<int, T> col_t;
typedef std::map<int, col_t > mat_t;


the sparse matrix is build as a "map to map"

the first map represent the rows of the matrix.
mat[i] is a map representing the i-th row.

mat[i][j] is the "cell" [i][j] in the matrix.

because of the map implementation, if there is no value in [i][j] the return value will be 0.

==Constructors==

===empty constructor===
create 1 on 1 sparse matrix
{{{
SparseMat<T> A();
}}}
===nXn constructor===
create nXn Sparse matrix
{{{
SparseMat<T> A(n);
}}}
===mXn constructor===
create mXn sparse matrix
{{{
SparseMat<T> A(m,n);
}}}
==copy constructor===
{{{
SparseMat<T> B(3000);
SparseMat<T> A(B);
}}}
===custom constructors===
create one Sparse Matrix from four Sparse Matrixes
==========
| q1 | q2|
==========
| q3 | q4|
==========
{{{
SparseMat<T> (const SparseMat<T2>* q1, const SparseMat<T2>* q2, const SparseMat<T2>* q3, const SparseMat<T2>* q4)
}}}

add 5 matrix to one:
{{{
 //assuming all matrixes are the same size
template<class T2>
SparseMat<T> (SparseMat<T2>* A1 ,SparseMat<T2>* A2 , SparseMat<T2>* A3 ,SparseMat<T2>* A4 ,SparseMat<T2>* A5  ) 
}}}



==iterators==
{{{
typedef typename mat_t::iterator row_iter;
typedef typename mat_t::const_iterator const_row_iter;
                
typedef typename col_t::iterator col_iter;
typedef typename col_t::const_iterator const_col_iter;
}}}
how to iterate over the entire matrix:
{{{
//inner calss implementation:
for (row_iter ii = mat.begin(); ii != mat.end(); ii++){
  for (col_iter jj = ii->second.begin(); jj != ii->second.end(); jj++){
                mat[i][j]= something;
                something = mat[i][j];

//outer class implementation:
SparseMat<int> A(1000,1500);
//put some data in the matrix
for (SparseMat<int>::row_iter ii = A.begin(); ii != A.end(); ii++)
    for (SparseMat<int>::col_iter jj= ii->second.begin(); jj != ii->second.end(); jj++){
		cout<<"A["<<ii->first<<"]["<<jj->first<<"]="<<jj->second<<endl;
     }
}}}

==Access to Matrix cell==
to access to a specific cell in the matrix one can use the (int i, int j) operator.
for example:
{{{
SparseMat<double> A(100,200);
A(50,80) = 18.3; // put 18.3 in cell [50][80]
double x = A(50,80); //put the value of cell [50][80] in x
}}}

==other implemented operators==
the following operators are implemented:
===<<=== 
(for ostream will print by rows, for ofstream will prints like in MATLAB)
for example for the matrix:
1 0 0 2
0 0 0 0 
0 3 0 0
0 0 0 4
{{{
cout<<A<<endl; 
}}}
output:
{{{
(0,0)=1  (0,3)=2
(2,1)=3
(3,3)=4
}}}

{{{
string filename = "a.txt";
ofstream thefile(filename.c_str(),ios::out);
thefile<<A<<endl;
thefile.close();
}}}
output:
{{{
(1,1)	1
(3,2)	3
(1,4)	2
(4,4)	4
}}}

===+ += - -= ===
some implemented, some commented

==methods==
continue here...

